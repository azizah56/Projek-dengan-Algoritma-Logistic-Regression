# -*- coding: utf-8 -*-
"""kel_5_ssd_logistic regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qKfBSuT7RmmQrMV5R68Utqq_YiR-RkwQ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import roc_curve, auc, confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression

data = pd.read_csv('bad good.csv')
data.head()

"""explore data"""

x = data['Status']
ax = sns.countplot(x=x, data=data)

def plot_data(hue,data):
  for i, col in enumerate(data.columns):
    plt.figure(i)
    ax=sns.countplot(x=data[col],hue=hue, data=data)

hue = data['Status']
data_to_plot = data.drop('Status',axis=1)
plot_data(hue, data_to_plot)

sns.pairplot(data,hue='Status')

#mengecel apakadh ada NA atau tidak
for col in data.columns:
  print(f"{col}:{data[col].isnull().sum()}")

from types import LambdaType
#melabelkan status dalam 0 dan 1
le = LabelEncoder()
data['Status']= le.fit_transform(data['Status'])
data.head(100)

#plot menggunakan regresi linier
plt.scatter(data.Usia,data.Status, marker='+', color='red')

#mengecek tipe data
print(data.dtypes)

#memilih x kecuali kolom terakhir
X= data.iloc[:,:-1]
#memilih y
Y=data.iloc[:,-1]

plt.X= data.loc[:,"Pendapatan"]
plt.Y= data.loc[:,'Status']
plt.scatter(plt.X, plt.Y, color='red', label='Pendapatan')

plt.X= data.loc[:,"Usia"]
plt.Y= data.loc[:,'Status']
plt.scatter(plt.X, plt.Y, color='green', label='Usia')

plt.show()

X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.2, random_state=13)

model = LogisticRegression(random_state=0)
model1 = model.fit(X_train, Y_train)

print (model1.coef_)

#setelah model dilatih maka dilakukan presdiksi terhadap model testing
prediksi= model.predict(X_test)
print(prediksi)
print()

print(classification_report(Y_test,prediksi))
print('akurasi: ',accuracy_score(Y_test,prediksi))

y_pred = model.predict(X_test)
from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(Y_test, y_pred)
print(confusion_matrix)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.fit_transform(X_test)
print(X_train[0:10,:])

from numpy.lib.arraysetops import unique
from matplotlib.colors import ListedColormap
X_set, Y_set = X_train, Y_train
X1,X2 = np.meshgrid(np.arange(start= X_set[:, 0].min() -1, stop = X_set[:, 0].max() + 1, step =0.01),
                    np.arange(start= X_set[:, 1].min() -1, stop = X_set[:, 1].max() + 1, step =0.01))
plt.contour(X1, X2,model.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),
            alpha =0.75, cmap = ListedColormap(('red','green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(Y_set)):
  plt.scatter(X_set[Y_set == j,0], X_set[Y_set == j, 1],
              c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Pendapatan')
plt.ylabel('Usia')
plt.legend()
plt.show()

from matplotlib.colors import ListedColormap
X_set, Y_set = X_test, Y_test
X1,X2 = np.meshgrid(np.arange(start= X_set[:, 0].min() -1, stop = X_set[:, 0].max() + 1, step =0.01),
                    np.arange(start= X_set[:, 1].min() -1, stop = X_set[:, 1].max() + 1, step =0.01))
plt.contour(X1, X2,model.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),
            alpha =0.75, cmap = ListedColormap(('red','green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(Y_set)):
  plt.scatter(X_set[Y_set == j,0], X_set[Y_set == j, 1],
              c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('Pendapatan')
plt.ylabel('Usia')
plt.legend()
plt.show()